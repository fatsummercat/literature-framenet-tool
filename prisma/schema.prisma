// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Literature {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  source    String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  episodes  Episode[]
}

model Episode {
  id           String     @id @default(cuid())
  title        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  literatureId String
  userId       String
  literature   Literature @relation(fields: [literatureId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id])
  scenarios    Scenario[]
}

model Scenario {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  episodeId String
  userId    String
  episode   Episode   @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  elements  Element[]
}

model Element {
  id         String   @id @default(cuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  scenarioId String
  userId     String
  scenario   Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
}

// NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  literatures   Literature[]
  episodes      Episode[]
  scenarios     Scenario[]
  elements      Element[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
